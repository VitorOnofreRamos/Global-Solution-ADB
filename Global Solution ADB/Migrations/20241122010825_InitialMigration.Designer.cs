// <auto-generated />
using System;
using Global_Solution_ADB.Infraestructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oracle.EntityFrameworkCore.Metadata;

#nullable disable

namespace Global_Solution_ADB.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241122010825_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            OracleModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Global_Solution_ADB.Models.Entities.Analysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ID_ANALYSIS");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SensorId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ID_SENSOR");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("ANALYSISTIMESTAMP");

                    b.Property<decimal>("Value")
                        .HasColumnType("NUMBER")
                        .HasColumnName("ANALYSISVALUE");

                    b.HasKey("Id");

                    b.HasIndex("SensorId");

                    b.ToTable("ANALYSIS");
                });

            modelBuilder.Entity("Global_Solution_ADB.Models.Entities.LogAlert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ID_ALERT");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnalysisId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ID_ANALYSIS");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR2(100)")
                        .HasColumnName("ALERTDESCRIPTION");

                    b.Property<string>("IsResolved")
                        .IsRequired()
                        .HasColumnType("CHAR(1)")
                        .HasColumnName("ISRESOLVED");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("RESOLVEDAT");

                    b.Property<DateTime>("TriggeredAt")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("TRIGGEREDAT");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisId");

                    b.ToTable("LOGALERT");
                });

            modelBuilder.Entity("Global_Solution_ADB.Models.Entities.Metric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ID_METRIC");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ElectricityProvided")
                        .HasColumnType("NUMBER")
                        .HasColumnName("ELECTRICITYPROVIDED");

                    b.Property<DateTime>("MetricDate")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("METRICDATE");

                    b.Property<decimal>("NuclearParticipation")
                        .HasColumnType("NUMBER")
                        .HasColumnName("NUCLEARPARTICIPATION");

                    b.Property<int>("NuclearPlantId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ID_NUCLEARPLANT");

                    b.Property<decimal>("OperationalEfficiency")
                        .HasColumnType("NUMBER")
                        .HasColumnName("OPERATIONALEFFICIENCY");

                    b.HasKey("Id");

                    b.HasIndex("NuclearPlantId");

                    b.ToTable("METRIC");
                });

            modelBuilder.Entity("Global_Solution_ADB.Models.Entities.NuclearPlant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ID_NUCLEARPLANT");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("FullCapacity")
                        .HasColumnType("NUMBER")
                        .HasColumnName("FULLCAPACITY");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR2(50)")
                        .HasColumnName("PLANTNAME");

                    b.Property<int>("NumberOfReactors")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("NUMBEROFREACTORS");

                    b.HasKey("Id");

                    b.ToTable("NUCLEARPLANT");
                });

            modelBuilder.Entity("Global_Solution_ADB.Models.Entities.Sensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ID_SENSOR");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MachinaryLocation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR2(50)")
                        .HasColumnName("MACHINARYLOCATION");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR2(50)")
                        .HasColumnName("SENSORNAME");

                    b.Property<int>("NuclearPlantId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ID_NUCLEARPLANT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("CHAR(1)")
                        .HasColumnName("STATUS");

                    b.HasKey("Id");

                    b.HasIndex("NuclearPlantId");

                    b.ToTable("SENSOR");
                });

            modelBuilder.Entity("Global_Solution_ADB.Models.Entities.SensorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ID_SENSORTYPE");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SensorId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ID_SENSOR");

                    b.Property<string>("SpecificType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR2(50)")
                        .HasColumnName("SPECIFICTYPE");

                    b.HasKey("Id");

                    b.HasIndex("SensorId")
                        .IsUnique();

                    b.ToTable("SENSORTYPE");
                });

            modelBuilder.Entity("Global_Solution_ADB.Models.Entities.Analysis", b =>
                {
                    b.HasOne("Global_Solution_ADB.Models.Entities.Sensor", "Sensor")
                        .WithMany("Analyses")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("Global_Solution_ADB.Models.Entities.LogAlert", b =>
                {
                    b.HasOne("Global_Solution_ADB.Models.Entities.Analysis", "Analysis")
                        .WithMany("LogAlerts")
                        .HasForeignKey("AnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Analysis");
                });

            modelBuilder.Entity("Global_Solution_ADB.Models.Entities.Metric", b =>
                {
                    b.HasOne("Global_Solution_ADB.Models.Entities.NuclearPlant", "NuclearPlant")
                        .WithMany("Metrics")
                        .HasForeignKey("NuclearPlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NuclearPlant");
                });

            modelBuilder.Entity("Global_Solution_ADB.Models.Entities.Sensor", b =>
                {
                    b.HasOne("Global_Solution_ADB.Models.Entities.NuclearPlant", "NuclearPlant")
                        .WithMany("Sensors")
                        .HasForeignKey("NuclearPlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NuclearPlant");
                });

            modelBuilder.Entity("Global_Solution_ADB.Models.Entities.SensorType", b =>
                {
                    b.HasOne("Global_Solution_ADB.Models.Entities.Sensor", "Sensor")
                        .WithOne("SensorType")
                        .HasForeignKey("Global_Solution_ADB.Models.Entities.SensorType", "SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("Global_Solution_ADB.Models.Entities.Analysis", b =>
                {
                    b.Navigation("LogAlerts");
                });

            modelBuilder.Entity("Global_Solution_ADB.Models.Entities.NuclearPlant", b =>
                {
                    b.Navigation("Metrics");

                    b.Navigation("Sensors");
                });

            modelBuilder.Entity("Global_Solution_ADB.Models.Entities.Sensor", b =>
                {
                    b.Navigation("Analyses");

                    b.Navigation("SensorType")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
